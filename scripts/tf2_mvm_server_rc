#!/bin/sh

### BEGIN INIT INFO
# Provides:          tf2_mvm_server
# Required-Start:    $remote_fs
# Required-Stop:     $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Team Fortress 2 MvM server
# Description:       Starts a Team Fortress 2 MvM server
### END INIT INFO

NAME="Team Fortress 2 MvM"
USER="dlacher"
SCREENREF="mvmserver"
SERVER_BASE_PATH="/srv/hlserver"
BINARYPATH="${SERVER_BASE_PATH}/mvm"
BINARYNAME="srcds_run"
STEAMCMDPATH="${SERVER_BASE_PATH}/steamcmd"
STEAMCMDSCRIPT="${STEAMCMDPATH}/mvm_ds.txt"
PIDFILE="tf2_mvm_server.pid"
# This must source from the same file as "mapcyclefile" in the config.
START_MAP="$(head -n 1 ${BINARYPATH}/tf/cfg/mapcycle.txt)"
PORT="27015"
MAX_PLAYERS="32"
REPLAY_DIR="mvm"

OPTS="-game tf -autoupdate -replay -replayserverdir ${REPLAY_DIR} -steam_dir ${STEAMCMDPATH} -steamcmd_script ${STEAMCMDSCRIPT} +sv_shutdown_timeout_minutes 5 +sv_pure 0 +port ${PORT} +maxplayers ${MAX_PLAYERS} +map ${START_MAP}"
PGREP_PATTERN="${BINARYNAME}.*${STEAMCMDSCRIPT}"


cd "$BINARYPATH"

running() {
    if [ -n "$(pgrep -f ${PGREP_PATTERN})" ]; then
        return 0
    else
        return 1
    fi
}

start() {
    if ! running; then
        echo -n "Starting the $NAME server... "
        start-stop-daemon --start --name $BINARYNAME --chuid $USER --user $USER --chdir $BINARYPATH --exec "/usr/bin/screen" -- -dmS $SCREENREF $BINARYPATH/$BINARYNAME $OPTS
        pgrep -f $PGREP_PATTERN > $PIDFILE
        if [ -s $PIDFILE ]; then
            echo "Done"
        else
            echo "Failed"
            rm $PIDFILE
        fi
    else
        echo "The $NAME server is already started."
    fi
}

stop() {
    if running; then
        echo -n "Stopping the $NAME server... "
        kill `cat $PIDFILE`
        while running; do
            sleep 1
        done
        rm $PIDFILE
        echo "Done"
    else
        echo "The $NAME server is already stopped."
    fi
}

case "$1" in
    start)
        start
    ;;
    stop)
        stop
    ;;
    restart)
	stop
        start
    ;;
    status)
        if running; then
            echo "The $NAME server is started."
        else
            echo "The $NAME server is stopped."
        fi
    ;;
    *)
        echo "Usage: $0 (start|stop|restart|status)"
        exit 1
esac
exit 0
